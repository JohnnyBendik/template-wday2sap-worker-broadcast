<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:workday="http://www.mulesoft.org/schema/mule/workday"
      xmlns:os="http://www.mulesoft.org/schema/mule/os"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/workday http://www.mulesoft.org/schema/mule/workday/current/mule-workday.xsd">
<flow name="schedulerFlow" doc:id="aff4106d-d2f6-4366-940a-a380dcb1cf73" >
    <scheduler doc:name="Scheduler" doc:id="58b7c776-fbee-4753-9bea-f6cc3e037efd" >
        <scheduling-strategy >
            <fixed-frequency frequency="${scheduler.frequency}" startDelay="${scheduler.start.delay}"/>
        </scheduling-strategy>
    </scheduler>
    <flow-ref doc:name="queryFlow" doc:id="ada07859-8839-4751-9623-68a08d31a472" name="queryFlow" />
	<flow-ref name="businessLogicFlow" doc:name="businessLogicFlow" doc:id="e16bf02c-b833-47de-afd5-2329ce1fab2b" />
    <error-handler >
        <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="488b507d-e26c-4c56-8759-8bb4f6645d71" type="ANY">
            <flow-ref doc:name="errorHandlingFlow" doc:id="afdaf73c-0137-4d60-84f6-5c41234771a3" name="errorHandlingFlow"/>
        </on-error-propagate>
    </error-handler>
</flow>
	<flow name="queryFlow">
    <os:retrieve key="watermark" target="lastQueryTimestamp" doc:name="Retrieve lastQueryTimestamp">
        <os:default-value><![CDATA[${watermark.default.expression}]]></os:default-value>
    </os:retrieve>
		<ee:transform doc:name="Prepare Get Workers request" doc:id="0e2062da-4a79-471a-bbf5-80038e92ce9b">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Workers_Request: {
		ns0#Request_Criteria: {
			ns0#Transaction_Log_Criteria_Data: {
				ns0#Transaction_Date_Range_Data: {
					ns0#Updated_From: vars.lastQueryTimestamp,
					ns0#Updated_Through: (now() - |PT6S|)
				}
			},
			ns0#Exclude_Inactive_Workers: true,
			ns0#Exclude_Employees: false,
			ns0#Exclude_Contingent_Workers: false
		},
		ns0#Response_Group: {
			ns0#Include_Personal_Information: true
		}
	}
}
	]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<workday:human-resources doc:name="Get Workers from Workday" doc:id="550846ca-d7e0-4896-9a43-9431e284b6c0" config-ref="Workday_Config" operation="Get_Workers" target="response" targetValue="#[output application/json --- payload]"/>
		<ee:transform doc:name="Transform Workday Response" doc:id="4239220e-212c-491b-89ef-dcf5cbd46dd8">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java

fun genderSAP(gender) = result : if (gender == 'Not_Declared') '0' 
                else if (gender == 'Female') '2' 
                else '1'
---  
(vars.response.Get_Workers_Response.Response_Data.*Worker map (worker) -> {
	FirstName       : worker.Worker_Data.Personal_Data.Name_Data.Legal_Name_Data.Name_Detail_Data.First_Name,
	MiddleName      : worker.Worker_Data.Personal_Data.Name_Data.Legal_Name_Data.Name_Detail_Data.Middle_Name,
	LastName        : worker.Worker_Data.Personal_Data.Name_Data.Legal_Name_Data.Name_Detail_Data.Last_Name,
	BirthPlace		: worker.Worker_Data.Personal_Data.City_Of_Birth,
	DoB				: worker.Worker_Data.Personal_Data.Birth_Date default '',
	Gender          : if (worker.Worker_Data.Personal_Data.Gender_Reference != null) genderSAP(worker.Worker_Data.Personal_Data.Gender_Reference[1]).result else '',
	Email			: if (worker.Worker_Data.Personal_Data.Contact_Data.Email_Address_Data != null) worker.Worker_Data.Personal_Data.Contact_Data.Email_Address_Data.Email_Address else null,
	Nationality     : if (worker.Worker_Data.Personal_Data.Identification_Data.National_ID.National_ID_Data.Country_Reference != null) worker.Worker_Data.Personal_Data.Identification_Data.National_ID.National_ID_Data.Country_Reference[1] else null,
	State           : if (worker.Worker_Data.Personal_Data.Identification_Data.National_ID.National_ID_Data.Country_Reference != null) worker.Worker_Data.Personal_Data.Identification_Data.National_ID.National_ID_Data.Country_Reference[2] else null,
	Ssn             : if (worker.Worker_Data.Personal_Data.Identification_Data.National_ID.National_ID_Data != null) worker.Worker_Data.Personal_Data.Identification_Data.National_ID.National_ID_Data.ID_Type_Reference[1] else null
}) default [] ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Log Workers to sync" doc:id="05a5334e-2471-4733-ae5e-1bd2abc96026" message="#['Workers to sync: ' ++ write(payload)]"/>
		<os:store key="watermark" failOnNullValue="false" doc:name="Store lastQueryTimestamp">
        <os:value><![CDATA[#[vars.response.Get_Workers_Response.Request_Criteria.Transaction_Log_Criteria_Data.Transaction_Date_Range_Data.Updated_Through]]]></os:value>
    </os:store>

</flow>
</mule>


        